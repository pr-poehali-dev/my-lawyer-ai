import json
import os
import requests
import psycopg2
from psycopg2.extras import RealDictCursor
from typing import Dict, Any, List

def search_legal_articles(question: str, db_url: str, limit: int = 5) -> List[Dict[str, Any]]:
    '''
    Search for relevant legal articles using PostgreSQL full-text search
    '''
    conn = psycopg2.connect(db_url)
    cursor = conn.cursor(cursor_factory=RealDictCursor)
    
    query = '''
        SELECT 
            code_name,
            full_name,
            article_number,
            article_title,
            article_text,
            source_url,
            ts_rank(to_tsvector('russian', article_text || ' ' || COALESCE(article_title, '')), plainto_tsquery('russian', %s)) as relevance
        FROM legal_documents
        WHERE to_tsvector('russian', article_text || ' ' || COALESCE(article_title, '')) @@ plainto_tsquery('russian', %s)
        ORDER BY relevance DESC
        LIMIT %s
    '''
    
    cursor.execute(query, (question, question, limit))
    results = cursor.fetchall()
    
    cursor.close()
    conn.close()
    
    return [dict(row) for row in results]

def format_legal_context(articles: List[Dict[str, Any]]) -> str:
    '''
    Format found articles into context for AI
    '''
    if not articles:
        return "–ü–æ –¥–∞–Ω–Ω–æ–º—É –≤–æ–ø—Ä–æ—Å—É –Ω–µ –Ω–∞–π–¥–µ–Ω–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö —Å—Ç–∞—Ç–µ–π –≤ –±–∞–∑–µ –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤–∞."
    
    context = "–ù–ê–ô–î–ï–ù–ù–´–ï –°–¢–ê–¢–¨–ò –ó–ê–ö–û–ù–û–î–ê–¢–ï–õ–¨–°–¢–í–ê:\n\n"
    for i, article in enumerate(articles, 1):
        context += f"{i}. {article['code_name']} –°—Ç–∞—Ç—å—è {article['article_number']}"
        if article.get('article_title'):
            context += f". {article['article_title']}"
        context += f"\n{article['article_text']}\n"
        context += f"–ò—Å—Ç–æ—á–Ω–∏–∫: {article['source_url']}\n\n"
    
    return context

def handler(event: Dict[str, Any], context: Any) -> Dict[str, Any]:
    '''
    Business: Legal AI assistant with RAG (Retrieval-Augmented Generation) using real Russian laws
    Args: event with httpMethod, body containing question
          context with request_id attribute
    Returns: HTTP response with legal consultation based on real law articles
    '''
    method: str = event.get('httpMethod', 'GET')
    
    if method == 'OPTIONS':
        return {
            'statusCode': 200,
            'headers': {
                'Access-Control-Allow-Origin': '*',
                'Access-Control-Allow-Methods': 'GET, POST, OPTIONS',
                'Access-Control-Allow-Headers': 'Content-Type, X-User-Id, X-Auth-Token',
                'Access-Control-Max-Age': '86400'
            },
            'body': '',
            'isBase64Encoded': False
        }
    
    if method != 'POST':
        return {
            'statusCode': 405,
            'headers': {
                'Content-Type': 'application/json',
                'Access-Control-Allow-Origin': '*'
            },
            'body': json.dumps({'error': '–ú–µ—Ç–æ–¥ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è'}),
            'isBase64Encoded': False
        }
    
    body_str = event.get('body', '{}')
    body_data = json.loads(body_str)
    question = body_data.get('question', '').strip()
    
    if not question:
        return {
            'statusCode': 400,
            'headers': {
                'Content-Type': 'application/json',
                'Access-Control-Allow-Origin': '*'
            },
            'body': json.dumps({'error': '–í–æ–ø—Ä–æ—Å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º'}),
            'isBase64Encoded': False
        }
    
    api_key = os.environ.get('AJEH8IE6O67PV84B19BO') or os.environ.get('YANDEX_API_KEY')
    folder_id = os.environ.get('YANDEX_FOLDER_ID')
    db_url = os.environ.get('DATABASE_URL')
    
    if not api_key or not folder_id:
        return {
            'statusCode': 500,
            'headers': {
                'Content-Type': 'application/json',
                'Access-Control-Allow-Origin': '*'
            },
            'body': json.dumps({'error': 'API –∫–ª—é—á–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã'}),
            'isBase64Encoded': False
        }
    
    if not db_url:
        return {
            'statusCode': 500,
            'headers': {
                'Content-Type': 'application/json',
                'Access-Control-Allow-Origin': '*'
            },
            'body': json.dumps({'error': '–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞'}),
            'isBase64Encoded': False
        }
    
    legal_articles = search_legal_articles(question, db_url, limit=5)
    legal_context = format_legal_context(legal_articles)
    
    url = 'https://llm.api.cloud.yandex.net/foundationModels/v1/completion'
    headers = {
        'Authorization': f'Api-Key {api_key}',
        'Content-Type': 'application/json'
    }
    
    system_prompt = f'''–¢—ã –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–π –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –ø–æ —Ä–æ—Å—Å–∏–π—Å–∫–æ–º—É –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤—É.

‚ö†Ô∏è –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–´–ï –ü–†–ê–í–ò–õ–ê:
1. –ò—Å–ø–æ–ª—å–∑—É–π –¢–û–õ–¨–ö–û —Å—Ç–∞—Ç—å–∏ –∏–∑ —Ä–∞–∑–¥–µ–ª–∞ "–ù–ê–ô–î–ï–ù–ù–´–ï –°–¢–ê–¢–¨–ò –ó–ê–ö–û–ù–û–î–ê–¢–ï–õ–¨–°–¢–í–ê" –Ω–∏–∂–µ
2. –í–°–ï–ì–î–ê —É–∫–∞–∑—ã–≤–∞–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –Ω–æ–º–µ—Ä–∞ —Å—Ç–∞—Ç–µ–π –∏ –∫–æ–¥–µ–∫—Å–æ–≤ –∏–∑ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
3. –ù–ò–ö–û–ì–î–ê –Ω–µ –≤—ã–¥—É–º—ã–≤–∞–π —Å—Ç–∞—Ç—å–∏, –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç –≤ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–∞—Ö
4. –ï—Å–ª–∏ –≤ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Å—Ç–∞—Ç—å—è—Ö –Ω–µ—Ç –ø–æ–ª–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ - —á–µ—Å—Ç–Ω–æ —Å–∫–∞–∂–∏ –æ–± —ç—Ç–æ–º –∏ –ø–æ—Ä–µ–∫–æ–º–µ–Ω–¥—É–π –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ —é—Ä–∏—Å—Ç—É
5. –¶–∏—Ç–∏—Ä—É–π —Ç–æ—á–Ω—ã–µ —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∏ –∏–∑ —Å—Ç–∞—Ç–µ–π, –∞ –Ω–µ –ø–µ—Ä–µ—Ñ—Ä–∞–∑–∏—Ä—É–π

–§–û–†–ú–ê–¢ –û–¢–í–ï–¢–ê:

üìã **–ö—Ä–∞—Ç–∫–∏–π –æ—Ç–≤–µ—Ç:**
[2-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —Å—Ç–∞—Ç–µ–π]

üìñ **–ü—Ä–∞–≤–æ–≤–∞—è –æ—Å–Ω–æ–≤–∞:**
[–ü—Ä–æ—Ü–∏—Ç–∏—Ä—É–π —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ —á–∞—Å—Ç–∏ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Å—Ç–∞—Ç–µ–π —Å —É–∫–∞–∑–∞–Ω–∏–µ–º: "–°—Ç–∞—Ç—å—è X –ö–û–î–ï–ö–°: —Ç–µ–∫—Å—Ç"]

üí° **–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:**
[–ß—Ç–æ –¥–µ–ª–∞—Ç—å –≤ –¥–∞–Ω–Ω–æ–π —Å–∏—Ç—É–∞—Ü–∏–∏, –æ—Å–Ω–æ–≤—ã–≤–∞—è—Å—å –Ω–∞ –ø—Ä–∏–≤–µ–¥–µ–Ω–Ω—ã—Ö —Å—Ç–∞—Ç—å—è—Ö]

‚ö†Ô∏è **–í–∞–∂–Ω–æ:**
[–ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ - —É–∫–∞–∂–∏ —ç—Ç–æ –∏ –ø–æ—Ä–µ–∫–æ–º–µ–Ω–¥—É–π –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é —é—Ä–∏—Å—Ç–∞]

{legal_context}'''

    payload = {
        'modelUri': f'gpt://{folder_id}/yandexgpt',
        'completionOptions': {
            'stream': False,
            'temperature': 0.1,
            'maxTokens': 3000
        },
        'messages': [
            {
                'role': 'system',
                'text': system_prompt
            },
            {
                'role': 'user',
                'text': question
            }
        ]
    }
    
    response = requests.post(url, headers=headers, json=payload, timeout=30)
    
    if response.status_code != 200:
        return {
            'statusCode': 500,
            'headers': {
                'Content-Type': 'application/json',
                'Access-Control-Allow-Origin': '*'
            },
            'body': json.dumps({
                'error': f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ YandexGPT: {response.status_code} {response.text}'
            }),
            'isBase64Encoded': False
        }
    
    result = response.json()
    answer = result.get('result', {}).get('alternatives', [{}])[0].get('message', {}).get('text', '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç')
    
    return {
        'statusCode': 200,
        'headers': {
            'Content-Type': 'application/json',
            'Access-Control-Allow-Origin': '*'
        },
        'body': json.dumps({
            'answer': answer,
            'sources': [
                {
                    'code': article['code_name'],
                    'article': article['article_number'],
                    'title': article.get('article_title'),
                    'url': article['source_url']
                }
                for article in legal_articles
            ]
        }, ensure_ascii=False),
        'isBase64Encoded': False
    }
