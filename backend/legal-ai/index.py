import json
import os
import requests
from typing import Dict, Any

def handler(event: Dict[str, Any], context: Any) -> Dict[str, Any]:
    '''
    Business: Legal AI assistant using fine-tuned YandexGPT model
    Args: event with httpMethod, body containing question
          context with request_id attribute
    Returns: HTTP response with legal consultation answer
    '''
    method: str = event.get('httpMethod', 'GET')
    
    if method == 'OPTIONS':
        return {
            'statusCode': 200,
            'headers': {
                'Access-Control-Allow-Origin': '*',
                'Access-Control-Allow-Methods': 'GET, POST, OPTIONS',
                'Access-Control-Allow-Headers': 'Content-Type, X-User-Id, X-Auth-Token',
                'Access-Control-Max-Age': '86400'
            },
            'body': '',
            'isBase64Encoded': False
        }
    
    if method != 'POST':
        return {
            'statusCode': 405,
            'headers': {
                'Content-Type': 'application/json',
                'Access-Control-Allow-Origin': '*'
            },
            'body': json.dumps({'error': '–ú–µ—Ç–æ–¥ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è'}),
            'isBase64Encoded': False
        }
    
    body_str = event.get('body', '{}')
    body_data = json.loads(body_str)
    question = body_data.get('question', '').strip()
    
    if not question:
        return {
            'statusCode': 400,
            'headers': {
                'Content-Type': 'application/json',
                'Access-Control-Allow-Origin': '*'
            },
            'body': json.dumps({'error': '–í–æ–ø—Ä–æ—Å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º'}),
            'isBase64Encoded': False
        }
    
    api_key = os.environ.get('YANDEX_API_KEY')
    folder_id = os.environ.get('YANDEX_FOLDER_ID')
    
    if not api_key or not folder_id:
        return {
            'statusCode': 500,
            'headers': {
                'Content-Type': 'application/json',
                'Access-Control-Allow-Origin': '*'
            },
            'body': json.dumps({'error': 'API –∫–ª—é—á–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã'}),
            'isBase64Encoded': False
        }
    
    url = 'https://llm.api.cloud.yandex.net/foundationModels/v1/completion'
    headers = {
        'Authorization': f'Api-Key {api_key}',
        'Content-Type': 'application/json'
    }
    
    system_prompt = '''–¢—ã –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–π –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç —Å –≥–ª—É–±–æ–∫–∏–º–∏ –∑–Ω–∞–Ω–∏—è–º–∏ —Ä–æ—Å—Å–∏–π—Å–∫–æ–≥–æ –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤–∞.

–ü–†–ê–í–ò–õ–ê –û–¢–í–ï–¢–û–í:
1. –î–∞–≤–∞–π –†–ê–ó–í–ï–†–ù–£–¢–´–ï –∏ –ü–û–î–†–û–ë–ù–´–ï –æ—Ç–≤–µ—Ç—ã (–º–∏–Ω–∏–º—É–º 150-200 —Å–ª–æ–≤)
2. –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä—É–π –æ—Ç–≤–µ—Ç:
   - –ö—Ä–∞—Ç–∫–∏–π –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å
   - –ü–æ–¥—Ä–æ–±–Ω–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏
   - –°—Å—ã–ª–∫–∏ –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Å—Ç–∞—Ç—å–∏ –∑–∞–∫–æ–Ω–æ–≤ (–ì–ö –†–§, –¢–ö –†–§, –£–ö –†–§ –∏ —Ç.–¥.)
   - –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
3. –ò—Å–ø–æ–ª—å–∑—É–π –¢–û–õ–¨–ö–û –¥–æ—Å—Ç–æ–≤–µ—Ä–Ω—ã–µ —Ñ–∞–∫—Ç—ã –∏–∑ —Ä–æ—Å—Å–∏–π—Å–∫–æ–≥–æ –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤–∞
4. –ï—Å–ª–∏ –Ω–µ —É–≤–µ—Ä–µ–Ω –≤ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ - —á–µ—Å—Ç–Ω–æ —Å–∫–∞–∂–∏ –æ–± —ç—Ç–æ–º –∏ –ø–æ—Ä–µ–∫–æ–º–µ–Ω–¥—É–π –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –ø—Ä–∞–∫—Ç–∏–∫—É—é—â–µ–º—É —é—Ä–∏—Å—Ç—É
5. –ù–ï –ø—Ä–∏–¥—É–º—ã–≤–∞–π –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Å—Ç–∞—Ç—å–∏ –∑–∞–∫–æ–Ω–æ–≤
6. –ï—Å–ª–∏ –∑–∞–∫–æ–Ω –∏–∑–º–µ–Ω–∏–ª—Å—è - —É–∫–∞–∑—ã–≤–∞–π –∞–∫—Ç—É–∞–ª—å–Ω—É—é —Ä–µ–¥–∞–∫—Ü–∏—é
7. –ü—Ä–∏–≤–æ–¥–∏ –ø—Ä–∏–º–µ—Ä—ã –∏–∑ —Å—É–¥–µ–±–Ω–æ–π –ø—Ä–∞–∫—Ç–∏–∫–∏, –µ—Å–ª–∏ —É–º–µ—Å—Ç–Ω–æ
8. –û–±—ä—è—Å–Ω—è–π —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–µ —Ç–µ—Ä–º–∏–Ω—ã –ø—Ä–æ—Å—Ç—ã–º —è–∑—ã–∫–æ–º

–§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞:
üìã **–ö—Ä–∞—Ç–∫–∏–π –æ—Ç–≤–µ—Ç:** [—Å—É—Ç—å –≤ 1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è—Ö]

üìñ **–ü–æ–¥—Ä–æ–±–Ω–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ:**
[—Ä–∞–∑–≤–µ—Ä–Ω—É—Ç–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ —Å –¥–µ—Ç–∞–ª—è–º–∏]

‚öñÔ∏è **–ü—Ä–∞–≤–æ–≤–∞—è –±–∞–∑–∞:**
[—Å—Å—ã–ª–∫–∏ –Ω–∞ —Å—Ç–∞—Ç—å–∏ –∑–∞–∫–æ–Ω–æ–≤]

üí° **–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:**
[—á—Ç–æ –¥–µ–ª–∞—Ç—å –≤ —Ç–∞–∫–æ–π —Å–∏—Ç—É–∞—Ü–∏–∏]'''

    payload = {
        'modelUri': f'gpt://{folder_id}/yandexgpt',
        'completionOptions': {
            'stream': False,
            'temperature': 0.2,
            'maxTokens': 3000
        },
        'messages': [
            {
                'role': 'system',
                'text': system_prompt
            },
            {
                'role': 'user',
                'text': question
            }
        ]
    }
    
    response = requests.post(url, headers=headers, json=payload, timeout=30)
    
    if response.status_code != 200:
        return {
            'statusCode': 500,
            'headers': {
                'Content-Type': 'application/json',
                'Access-Control-Allow-Origin': '*'
            },
            'body': json.dumps({
                'error': f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ YandexGPT: {response.status_code} {response.text}'
            }),
            'isBase64Encoded': False
        }
    
    result = response.json()
    answer = result.get('result', {}).get('alternatives', [{}])[0].get('message', {}).get('text', '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç')
    
    return {
        'statusCode': 200,
        'headers': {
            'Content-Type': 'application/json',
            'Access-Control-Allow-Origin': '*'
        },
        'body': json.dumps({'answer': answer}, ensure_ascii=False),
        'isBase64Encoded': False
    }